# -*- coding: utf-8 -*-
"""time series sub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VK1NmmUzawYzlqXL_81-ZO_IbTww4cp7
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/PHJMF.csv')
df.tail()

df['Open'].fillna(df["Open"].mean(), inplace=True)

df.isnull().sum()



"""Nama : Muhammad Izuddin Jundullah
username dicoding : Izuddin Jundi
email : jundigates@gmail.com
"""

tanggal = df['Date'].values
harga  = df['Open'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(tanggal, harga)
plt.title('grafik',
          fontsize=20);

x_train, x_test, y_train, y_test = train_test_split(tanggal, harga, test_size = 0.2, shuffle=False)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(y_train, window_size=60, batch_size=32, shuffle_buffer=1000)
val_set = windowed_dataset(y_test, window_size=60, batch_size=32, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.Adam(lr=1.0000e-04)
model.compile(loss=tf.keras.losses.MeanAbsoluteError(),
              optimizer=optimizer,
              metrics=["mae"])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<0.100):
      print("\nmae udah dibawah 10%!")
      self.model.stop_training = True
callbacks = myCallback()

history = model.fit(train_set, validation_data=val_set, epochs=100, callbacks=[callbacks])